.main {
  width: 100%;
  height: 100vh;
  margin-left: 350px;
  padding: 20px 40px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
}


.grid {
  width: auto;
  height: 860px;
  display: grid;
  grid-template-columns: repeat(4, minmax(0, 1fr));
  column-gap: 1rem;
  row-gap: 1rem;
  margin: 0 auto;
  overflow-y: scroll;
  overflow-x: hidden;
  padding: 5px;
}

.grid::-webkit-scrollbar {
  width: 0.15rem;
}

.grid::-webkit-scrollbar-track {
  background: black;
  margin-top: 4.75rem;
}

.grid::-webkit-scrollbar-thumb {
  background: gray;
}

.header {
  width: 100%;
  height: 3.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  grid-column: span 4 / span 4;
  font-size: 28px;
  box-sizing: border-box;
}

.name{
  text-shadow: 0 0 0.2rem white;
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.settings{
  padding-top: 0.45rem;
  stroke-width: 1.5;
  filter: drop-shadow(0 0 0.05rem #fff5cc);
}

.settings:hover{
  cursor: pointer;
  stroke-width: 2;
}

.modes {
  width: 80px;
  height: 2.75rem;
  border-radius: 5px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 8px;
  box-sizing: border-box;
}

.mode {
  padding: 8px;
  border-radius: 5px;
}

.mode:hover {
  cursor: pointer;
  background-color: #1e212d;
}

.modeActive {
  padding: 8px;
  border-radius: 5px;
  background-color: #1e212d;
}

.gridElement {
  width: 350px;
  height: 200px;
}

@media(max-width: 768px) {
  .main {
    margin: 0;
  }

  .grid {
    margin: 0;
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  .modes {
    display: none;
  }
}


@media(max-width: 1800px) {
  .grid {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  .header {
    grid-column: span 3 / span 3;
  }
}

@media(max-width: 1530px) {
  .grid {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  .header {
    grid-column: span 2/ span 2;
  }
}


@media(max-width: 1180px) {
  .grid {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  .header {
    grid-column: span 1 / span 1;
  }
}

.loader {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}